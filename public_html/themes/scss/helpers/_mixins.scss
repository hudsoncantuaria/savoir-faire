@mixin transition() {
  -webkit-transition: all 0.5s cubic-bezier(0.4, 0.0, 0.2, 1);
  -moz-transition: all 0.5s cubic-bezier(0.4, 0.0, 0.2, 1);
  -o-transition: all 0.5s cubic-bezier(0.4, 0.0, 0.2, 1);
  transition: all 0.5s cubic-bezier(0.4, 0.0, 0.2, 1);
}

@mixin transition-slow() {
  -webkit-transition: all 0.75s cubic-bezier(0.4, 0.0, 0.2, 1);
  -moz-transition: all 0.75s cubic-bezier(0.4, 0.0, 0.2, 1);
  -o-transition: all 0.75s cubic-bezier(0.4, 0.0, 0.2, 1);
  transition: all 0.75s cubic-bezier(0.4, 0.0, 0.2, 1);
}

@mixin transition-slowest() {
  -webkit-transition: all 1s cubic-bezier(0.4, 0.0, 0.2, 1);
  -moz-transition: all 1s cubic-bezier(0.4, 0.0, 0.2, 1);
  -o-transition: all 1s cubic-bezier(0.4, 0.0, 0.2, 1);
  transition: all 1s cubic-bezier(0.4, 0.0, 0.2, 1);
}

@mixin transition-detailed($property, $duration, $timing) {
  -webkit-transition: $property $duration $timing;
  -moz-transition: $property $duration $timing;
  -o-transition: $property $duration $timing;
  transition: $property $duration $timing;
}

@mixin translate($value) {
  transform: translate($value);
  -webit-transform: translate($value);
  -ms-transform: translate($value);
  -o-transform: translate($value);
  -moz-transform: translate($value);
}

@mixin translateY($value) {
  transform: translateY($value);
  -webit-transform: translateY($value);
  -ms-transform: translateY($value);
  -o-transform: translateY($value);
  -moz-transform: translateY($value);
}

@mixin translateX($value) {
  transform: translateX($value);
  -webit-transform: translateX($value);
  -ms-transform: translateX($value);
  -o-transform: translateX($value);
  -moz-transform: translateX($value);
}

@mixin scaleUp($value) {
  transform: scale($value);
  -webit-transform: scale($value);
  -ms-transform: scale($value);
  -o-transform: scale($value);
  -moz-transform: scale($value);
}

@mixin scaleX($value) {
  transform: scaleX($value);
  -webit-transform: scaleX($value);
  -ms-transform: scaleX($value);
  -o-transform: scaleX($value);
  -moz-transform: scaleX($value);
}

@mixin text-shadow($value) {
  text-shadow: $value;
}

@mixin font-size($size) {
  font-size: $size !important;
  font-size: calculateRem($size) !important;
}

@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

@mixin flex-wrap($value) {
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -moz-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

@mixin align-self($value: auto) {
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

@mixin align-content($value: stretch) {
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

@mixin absolutecenter($axis: "both") {
  position: absolute;
  @if $axis == "y" {
    top: 50%;
    transform: translateY(-50%);
  }
  @if $axis == "x" {
    left: 50%;
    transform: translateX(-50%);
  }
  @if $axis == "both" {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

@mixin rotate($deg) {
  transform: rotate($deg);
  -webkit-transform: rotate($deg);
  -moz-transform: rotate($deg);
  -o-transform: rotate($deg);
}
