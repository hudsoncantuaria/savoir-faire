<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use lajax\translatemanager\helpers\Language as Lx;
use Yii;
use yii\db\ActiveRecord;
use yii\db\Expression;

/**
 * This is the base-model class for table "invoices".
 *
 * @property integer $id_invoice
 * @property integer $id_user_client
 * @property integer $id_user_invoicer
 *
 * @property string $created
 * @property string $modified
 * @property string $total
 * @
 * @property \common\models\User $idUserClient
 * @property \common\models\User $idUserInvoicer
 * @property \common\models\InvoicesCertificates[] $invoicesCertificates
 * @property \common\models\Certificate[] $idCertificates
 * @property string $aliasModel
 */
abstract class Invoices extends \yii\db\ActiveRecord {

    // status types
    const STATUS_EMITTED= 1;
    const STATUS_PAID = 2;
    const STATUS_CANCELLED = 3;

    /**
     * @inheritdoc
     */
    public function behaviors() {
        return [
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created', 'modified'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['modified'],
                ],
                'value' => new Expression('NOW()'),
            ],
        ];
    }


    /**
     * @inheritdoc
     */
    public function rules() {
        return [
            [['id_user_client', 'id_user_invoicer', 'total', 'status'], 'required'],
            [['id_user_client', 'id_user_invoicer', 'status'], 'integer'],
            [['created', 'modified'], 'safe'],
            [['total'], 'number'],
            [['obs','date','nr','price'], 'string', 'max' => 255],
            [
                ['id_user_client'],
                'exist',
                'skipOnError' => true,
                'targetClass' => \common\models\User::className(),
                'targetAttribute' => ['id_user_client' => 'id']
            ],
            [
                ['id_user_invoicer'],
                'exist',
                'skipOnError' => true,
                'targetClass' => \common\models\User::className(),
                'targetAttribute' => ['id_user_invoicer' => 'id']
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels() {
        return [
            'id_invoice' => Yii::t('models', 'Id Invoice'),
            'id_user_client' => Yii::t('models', 'Id User Client'),
            'id_user_invoicer' => Yii::t('models', 'Id User Invoicer'),
            'created' => Yii::t('models', 'Created'),
            'modified' => Yii::t('models', 'Modified'),
            'total' => Yii::t('models', 'Total'),
            'price' => Yii::t('models', 'Price'),
            'nr' => Yii::t('models', 'Number'),
            'date' => Yii::t('models', 'Date'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints() {
        return array_merge(parent::attributeHints(), [
            'status' => Yii::t('models', '1-emitted;2-paid;3-cancelled'),
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getIdUserClient() {
        return $this->hasOne(\common\models\User::className(), ['id' => 'id_user_client']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getIdUserInvoicer() {
        return $this->hasOne(\common\models\User::className(), ['id' => 'id_user_invoicer']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDoc() {
        return $this->hasOne(\common\models\Doc::className(), ['id_doc' => 'id_doc']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getInvoicesCertificates() {
        return $this->hasMany(\common\models\InvoicesCertificates::className(), ['id_invoice' => 'id_invoice']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getIdCertificates() {
        return $this->hasMany(\common\models\Certificate::className(), ['id_certificate' => 'id_certificate'])
            ->viaTable('invoices_certificates', ['id_invoice' => 'id_invoice']);
    }

    /**
     * @param bool $cssClass
     *
     * @return array
     */
    public static function getStatusOptions($cssClass = false) {
        return !$cssClass ? [
            self::STATUS_EMITTED => Lx::t('models', 'Emitted'),
            self::STATUS_PAID => Lx::t('models', 'Paid'),
            self::STATUS_CANCELLED => Lx::t('models', 'Cancelled'),
        ] : [
            self::STATUS_EMITTED => 'blue',
            self::STATUS_PAID => 'green',
            self::STATUS_CANCELLED => 'red',
        ];
    }

}
