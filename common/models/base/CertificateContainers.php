<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use Yii;

/**
 * This is the base-model class for table "certificate_container".
 *
 * @property integer $id_certificate
 * @property integer $size
 * @property string $created
 * @property string $modified
 * @property string $nr
 * @property string $seal_nr
 * @property string $vgm
 * @property integer $type
 * @property integer $type_fcl_lcl
 * @property string $description
 *
 * @property \common\models\Certificate $idCertificate
 * @property string $aliasModel
 */
abstract class CertificateContainers extends \yii\db\ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'certificate_container';
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id_certificate', 'id_container_type', 'nr'], 'required'],
            [['id_certificate', 'id_container_type', 'size', 'type', 'type_fcl_lcl'], 'integer'],
            [['created', 'modified'], 'safe'],
            [['nr', 'seal_nr'], 'string', 'max' => 60],
            [['vgm'], 'string', 'max' => 20],
            [['description'], 'string'],
            [['soc'], 'boolean'],
            [['id_certificate'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\Certificate::className(), 'targetAttribute' => ['id_certificate' => 'id_certificate']],
            [['id_container_type'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\ContainerTypes::className(), 'targetAttribute' => ['id_container_type' => 'id_container_type']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id_container' => Yii::t('models', 'Id Container'),
            'id_certificate' => Yii::t('models', 'Id Certificate'),
            'id_container_type' => Yii::t('models', 'Id Container Type'),
            'size' => Yii::t('models', 'Size'),
            'created' => Yii::t('models', 'Created'),
            'modified' => Yii::t('models', 'Modified'),
            'nr' => Yii::t('models', 'Nr'),
            'seal_nr' => Yii::t('models', 'Seal Nr'),
            'vgm' => Yii::t('models', 'Vgm'),
            'type' => Yii::t('models', 'Type'),
            'type_fcl_lcl' => Yii::t('models', 'Type Fcl Lcl'),
            'description' => Yii::t('models', 'Content'),
            'soc' => Yii::t('models', 'SOC'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            //'size' => Yii::t('models', '1-20FT; 2-40FT'),
            'type' => Yii::t('models', '1-freezer;2\'dry\''),
            'type_fcl_lcl' => Yii::t('models', '1FCL/FCL;2-FCL/LCL;3-LCL/FCL;4-LCL/LCL'),
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getIdCertificate()
    {
        return $this->hasOne(\common\models\Certificate::className(), ['id_certificate' => 'id_certificate']);
    }
    
    public function getContainerType()
    {
        return $this->hasOne(\common\models\ContainerType::className(), ['id_container_type' => 'id_container_type']);
    }
    
    /*
     * @return $max_id_certificate_numbeer
     */
    public static function getMax(){
        $command = (new \yii\db\Query())
            ->select(['id_certificate_container', 'nr'])
        
            ->from('certificate_container')
            ->max("id_certificate_container");
        
        return $command;
    }
    
    /**
     * @inheritdoc
     * @return \common\models\query\CertificateContainerQuery the active query used by this AR class.
     */
    /*public static function find()
    {
        return new \common\models\query\CertificateContainerQuery(get_called_class());
    }*/


}
